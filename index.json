{
  "api/Global.Click.html": {
    "href": "api/Global.Click.html",
    "title": "Class Click | Documentation",
    "keywords": "Class Click Main and only class for the docfx example Inheritance System.Object Click Namespace : Global Assembly : cs.temp.dll.dll Syntax public class Click : MonoBehaviour Remarks This class works in conjunction with Main.uxml file. For more information about the UI structure see UI Documentation ."
  },
  "api/Global.html": {
    "href": "api/Global.html",
    "title": "Namespace Global | Documentation",
    "keywords": "Namespace Global Classes Click Main and only class for the docfx example"
  },
  "index.html": {
    "href": "index.html",
    "title": "DocFX Unity Documentation Generator | Documentation",
    "keywords": "DocFX Unity Documentation Generator A simple tool to generate API documentation for Unity projects using DocFX. Features Generates API documentation from C# code Creates PDF documentation Provides local preview server Supports GitHub Pages deployment Includes .gitignore rules for local builds Unity-specific documentation templates and styles Quick Start Install DocFX using Chocolatey: choco install docfx Or follow the installation guide at https://dotnet.github.io/docfx/index.html Copy the Documentation folder and build.ps1 to your project's root directory Configure your documentation: a. Update Documentation/docfx.json : { \"sitemap\": { \"baseUrl\": \"https://yourusername.github.io/YourRepository/\" }, \"globalMetadata\": { \"_appName\": \"Your Project Documentation\", \"_appTitle\": \"Your Project Documentation\", \"_enableSearch\": true } } b. Modify Documentation/filterConfig.yml : apiRules: - include: uidRegex: ^YourNamespace type: Namespace Replace YourNamespace with your project's root namespace. Add the following rules to your .gitignore file: # Ignore local DocFX generated files Documentation/_site/ # Generated website files Documentation/api/ # Generated API documentation Documentation/obj/ # DocFX temporary files These rules prevent locally generated documentation from being committed to your repository. This is important because: Documentation should be generated by GitHub Actions for deployment Prevents repository bloat Avoids conflicts between local and CI-generated files Generate documentation by running: powershell -ExecutionPolicy Bypass -File build.ps1 This will: Generate API documentation Create PDF files Start a local preview server at http://localhost:8080 Note : Due to .gitignore rules, the generated files will be available locally but won't be committed to the repository. The official documentation will be generated and deployed by GitHub Actions. Unity-Specific Setup This generator is specifically configured for Unity projects and includes: Unity-friendly documentation templates Proper handling of Unity-specific types and namespaces Integration with Unity's XML documentation format GitHub Pages Setup Setup GitHub Actions: Copy .github/workflows/documentation.yml from this repository to your project's .github/workflows/ directory If the .github/workflows directory doesn't exist, create it first Commit and push the changes Configure GitHub Pages: Go to your repository's Settings Navigate to Pages section Set the following: Source: Deploy from a branch Branch: gh-pages Folder: / (root) Wait for GitHub Actions to complete the deployment Your documentation will be available at https://yourusername.github.io/YourRepository/ Local Development Structure Basic structure for local development and testing: YourProject/ ├── Documentation/ # Documentation source files │ ├── api/ # API documentation (generated, git-ignored) │ ├── _site/ # Generated website (git-ignored) │ ├── _pdf/ # Generated PDFs (git-ignored) │ ├── docfx.json # DocFX configuration │ ├── filterConfig.yml # API filter rules │ ├── toc.yml # Table of contents │ └── index.md # Documentation home page ├── .gitignore # Git ignore rules └── build.ps1 # Build script This is the minimal structure needed for local documentation generation and preview. Complete Project Structure with GitHub Pages When setting up GitHub Pages deployment, your project structure will expand to include GitHub Actions workflow: YourProject/ ├── .github/ │ └── workflows/ # GitHub Actions workflows │ └── documentation.yml # Documentation generation workflow ├── Documentation/ # Documentation source files │ ├── api/ # API documentation (generated, git-ignored) │ ├── _site/ # Generated website (git-ignored) │ ├── _pdf/ # Generated PDFs (git-ignored) | ├── styles/ # Styles for pdf generation | ├── templates # Design template │ ├── docfx.json # DocFX configuration │ ├── filterConfig.yml # API filter rules │ ├── toc.yml # Table of contents │ └── index.md # Documentation home page ├── .gitignore # Git ignore rules └── build.ps1 # Build script This structure includes everything needed for both local development and automated deployment. File Management Source Files : Templates, configuration files, and markdown content are tracked in git Generated Files : The following are generated locally but ignored by git: Documentation/_site/ : Generated website files Documentation/api/ : API documentation Documentation/obj/ : DocFX cache and temporary files GitHub Pages : Documentation is automatically generated and deployed by GitHub Actions Troubleshooting Common issues and solutions: PDF Generation Fails Make sure wkhtmltopdf is installed Check if your documentation contains valid markdown API Documentation Missing Verify your namespace in filterConfig.yml Ensure your C# files have proper XML documentation comments GitHub Pages Not Updating Check GitHub Actions workflow runs Verify gh-pages branch exists and is configured correctly Unity Scripts Not Appearing Make sure scripts have proper XML documentation comments Check if namespace matches filterConfig.yml settings Verify script files are included in the build PDF Generation Details in Github Pages This project’s PDF documentation generation requires a custom approach due to limitations with DocFX’s native PDF tools. Instead of using DocFX’s built-in methods, we generate the PDF manually by combining individual HTML files. This does not apply to the local pdf generation, it uses docfx pdf in build.ps1. The current workflow: Combines each HTML file from the API documentation into a single api_combined.html file. Uses wkhtmltopdf to convert this combined HTML file into Documentation_api.pdf and the main documentation (index.html) into Documentation.pdf. This workaround was implemented after attempts to use DocFX’s standard PDF generation methods failed to produce a complete document, especially for API reference pages. Despite efforts to use the DocFX server and toc.yml file, issues such as missing content and connection errors persisted. Feel free to check out our GitHub Issue for more details and discussion on this approach or suggest alternatives! License This project is licensed under the MIT License - see the LICENSE file for details. Contributing Contributions are welcome! Feel free to submit issues and pull requests. Acknowledgments DocFX for the documentation generation engine Unity for the game engine DocFxForUnity - guide for DocFX integration with Unity UnityFX for Unity documentation style and templates"
  },
  "manual/index.html": {
    "href": "manual/index.html",
    "title": "UI Documentation | Documentation",
    "keywords": "UI Documentation UXML Structure Here's the structure of our UI: CounterButton.uxml ```xml <ui:UXML xmlns:ui=\"UnityEngine.UIElements\"> <ui:Button name=\"CounterButton\" text=\"Click me\"/> </ui:UXML>"
  }
}