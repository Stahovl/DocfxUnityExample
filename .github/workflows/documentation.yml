name: Build and Deploy Documentation

on:
  push:
    branches:
      - master
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '6.0.x'

      - name: Install DocFX
        run: choco install -y docfx

      - name: Install wkhtmltopdf
        run: choco install -y wkhtmltopdf

      - name: Debug Project Structure
        run: |
          echo "Current directory:"
          pwd
          echo "Content of current directory:"
          dir
          echo "Content of Assets folder:"
          dir /s /b Assets\*.cs
          echo "Content of Documentation folder:"
          dir Documentation
        shell: cmd
        continue-on-error: true

      - name: Use README.md as index.md
        run: copy README.md Documentation\index.md
        shell: cmd

      - name: Generate Metadata
        run: |
          cd Documentation
          if exist obj rmdir /s /q obj
          echo "Generating metadata..."
          docfx metadata --force --verbosity detailed
          echo "Metadata generation complete"
          echo "Content of api folder:"
          dir api
          type api\toc.yml
          echo "Content of obj folder:"
          dir obj
        shell: cmd

      - name: Build Documentation
        run: |
          cd Documentation
          echo "Building documentation..."
          docfx build --force --verbosity detailed
          echo "Build complete"
          echo "Content of _site folder:"
          dir _site
          echo "Content of _site/api folder:"
          dir _site\api
        shell: cmd

      - name: Create PDF directory
        run: New-Item -ItemType Directory -Force -Path Documentation\_site\_pdf
        shell: powershell

      - name: Generate PDFs
        run: |
          cd Documentation/_site
          
          Write-Host "Checking for required files..."
          if (Test-Path "api/index.html") {
              Write-Host "api/index.html exists"
              Get-Content "api/index.html" | Select-Object -First 10
          } else {
              Write-Host "api/index.html not found!"
          }
          
          Write-Host "Starting docfx server..."
          $serverProcess = Start-Process docfx -ArgumentList "serve", "." -PassThru -WindowStyle Hidden
          Start-Sleep -Seconds 20
          
          try {
              $response = Invoke-WebRequest -Uri "http://localhost:8080/api/index.html" -UseBasicParsing
              Write-Host "Server response status code: $($response.StatusCode)"
              Write-Host "Content length: $($response.RawContentLength)"
          } catch {
              Write-Host "Error accessing server: $_"
          }
          
          Write-Host "Generating API PDF..."
          wkhtmltopdf --enable-local-file-access `
                     --print-media-type `
                     --javascript-delay 5000 `
                     --no-stop-slow-scripts `
                     --debug-javascript `
                     --load-error-handling ignore `
                     --load-media-error-handling ignore `
                     --log-level debug `
                     http://localhost:8080/api/index.html "_pdf/Documentation_api.pdf"
          
          if (Test-Path "_pdf/Documentation_api.pdf") {
              Write-Host "API PDF generated, size: $((Get-Item "_pdf/Documentation_api.pdf").Length) bytes"
          } else {
              Write-Host "API PDF generation failed!"
          }
          
          Write-Host "Generating main documentation PDF..."
          wkhtmltopdf --enable-local-file-access `
                     --print-media-type `
                     --javascript-delay 5000 `
                     --no-stop-slow-scripts `
                     --debug-javascript `
                     --load-error-handling ignore `
                     --load-media-error-handling ignore `
                     --log-level debug `
                     http://localhost:8080/index.html "_pdf/Documentation.pdf"
          
          Stop-Process -Id $serverProcess.Id
        shell: powershell

      - name: Create .nojekyll file
        run: type nul > Documentation/_site/.nojekyll
        shell: cmd

      - name: Upload site artifact
        uses: actions/upload-artifact@v3
        with:
          name: _site
          path: Documentation/_site

      - name: Upload PDF artifact
        uses: actions/upload-artifact@v3
        with:
          name: documentation_pdfs
          path: Documentation/_site/_pdf

  deploy:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Download site artifact
        uses: actions/download-artifact@v3
        with:
          name: _site
          path: _site

      - name: Download PDF artifact
        uses: actions/download-artifact@v3
        with:
          name: documentation_pdfs
          path: _site/_pdf

      - name: Create .nojekyll file
        run: touch _site/.nojekyll

      - name: Deploy
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: _site